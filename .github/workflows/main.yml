name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Private Docker Registry
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login registry.getsoft.vn -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Build and push Docker image
      run: |
        docker build -t registry.getsoft.vn/sample-project:latest .
        docker push registry.getsoft.vn/sample-project:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: v1.19.11

    - name: Create .kube directory
      run: mkdir -p $HOME/.kube

    - name: Set up Kubeconfig
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
      run: echo "${KUBECONFIG}" > $HOME/.kube/config

    - name: Check Kubernetes Connection
      run: kubectl cluster-info

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/project.yaml

  sync:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install ArgoCD CLI
      run: |
        VERSION=$(curl --silent "https://api.github.com/repos/argoproj/argo-cd/releases/latest" | jq -r .tag_name)
        curl -sSL -o argocd-linux-amd64 "https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-linux-amd64"
        chmod +x argocd-linux-amd64
        sudo mv argocd-linux-amd64 /usr/local/bin/argocd

    - name: Sync ArgoCD Application
      run: |
        argocd login argocd.getsoft.vn --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure --grpc-web
        for i in {1..5}; do
          if argocd app sync sample-project; then
            argocd app wait sample-project --health --timeout 300
            break
          else
            echo "Sync failed, retrying in $((i*i)) seconds..."
            sleep $((i*i))
          fi
        done
